// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: ticketing.proto

package ticketing

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TicketingService_CreateReservation_FullMethodName  = "/ticketing.TicketingService/CreateReservation"
	TicketingService_GetReservation_FullMethodName     = "/ticketing.TicketingService/GetReservation"
	TicketingService_GetSeatAllocations_FullMethodName = "/ticketing.TicketingService/GetSeatAllocations"
	TicketingService_DeleteReservation_FullMethodName  = "/ticketing.TicketingService/DeleteReservation"
	TicketingService_UpdateReservation_FullMethodName  = "/ticketing.TicketingService/UpdateReservation"
)

// TicketingServiceClient is the client API for TicketingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Ticketing Service
type TicketingServiceClient interface {
	// A service method to reserve a ticket
	CreateReservation(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*CreateReservationResponse, error)
	GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*GetReservationResponse, error)
	GetSeatAllocations(ctx context.Context, in *GetSeatAllocatedRequest, opts ...grpc.CallOption) (*GetSeatAllocatedResponse, error)
	DeleteReservation(ctx context.Context, in *DeleteReservationRequest, opts ...grpc.CallOption) (*DeleteReservationResponse, error)
	UpdateReservation(ctx context.Context, in *UpdateReservationRequest, opts ...grpc.CallOption) (*UpdateReservationResponse, error)
}

type ticketingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicketingServiceClient(cc grpc.ClientConnInterface) TicketingServiceClient {
	return &ticketingServiceClient{cc}
}

func (c *ticketingServiceClient) CreateReservation(ctx context.Context, in *CreateReservationRequest, opts ...grpc.CallOption) (*CreateReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateReservationResponse)
	err := c.cc.Invoke(ctx, TicketingService_CreateReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketingServiceClient) GetReservation(ctx context.Context, in *GetReservationRequest, opts ...grpc.CallOption) (*GetReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReservationResponse)
	err := c.cc.Invoke(ctx, TicketingService_GetReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketingServiceClient) GetSeatAllocations(ctx context.Context, in *GetSeatAllocatedRequest, opts ...grpc.CallOption) (*GetSeatAllocatedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSeatAllocatedResponse)
	err := c.cc.Invoke(ctx, TicketingService_GetSeatAllocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketingServiceClient) DeleteReservation(ctx context.Context, in *DeleteReservationRequest, opts ...grpc.CallOption) (*DeleteReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteReservationResponse)
	err := c.cc.Invoke(ctx, TicketingService_DeleteReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticketingServiceClient) UpdateReservation(ctx context.Context, in *UpdateReservationRequest, opts ...grpc.CallOption) (*UpdateReservationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateReservationResponse)
	err := c.cc.Invoke(ctx, TicketingService_UpdateReservation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicketingServiceServer is the server API for TicketingService service.
// All implementations must embed UnimplementedTicketingServiceServer
// for forward compatibility.
//
// Ticketing Service
type TicketingServiceServer interface {
	// A service method to reserve a ticket
	CreateReservation(context.Context, *CreateReservationRequest) (*CreateReservationResponse, error)
	GetReservation(context.Context, *GetReservationRequest) (*GetReservationResponse, error)
	GetSeatAllocations(context.Context, *GetSeatAllocatedRequest) (*GetSeatAllocatedResponse, error)
	DeleteReservation(context.Context, *DeleteReservationRequest) (*DeleteReservationResponse, error)
	UpdateReservation(context.Context, *UpdateReservationRequest) (*UpdateReservationResponse, error)
	mustEmbedUnimplementedTicketingServiceServer()
}

// UnimplementedTicketingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTicketingServiceServer struct{}

func (UnimplementedTicketingServiceServer) CreateReservation(context.Context, *CreateReservationRequest) (*CreateReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReservation not implemented")
}
func (UnimplementedTicketingServiceServer) GetReservation(context.Context, *GetReservationRequest) (*GetReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservation not implemented")
}
func (UnimplementedTicketingServiceServer) GetSeatAllocations(context.Context, *GetSeatAllocatedRequest) (*GetSeatAllocatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSeatAllocations not implemented")
}
func (UnimplementedTicketingServiceServer) DeleteReservation(context.Context, *DeleteReservationRequest) (*DeleteReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReservation not implemented")
}
func (UnimplementedTicketingServiceServer) UpdateReservation(context.Context, *UpdateReservationRequest) (*UpdateReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReservation not implemented")
}
func (UnimplementedTicketingServiceServer) mustEmbedUnimplementedTicketingServiceServer() {}
func (UnimplementedTicketingServiceServer) testEmbeddedByValue()                          {}

// UnsafeTicketingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicketingServiceServer will
// result in compilation errors.
type UnsafeTicketingServiceServer interface {
	mustEmbedUnimplementedTicketingServiceServer()
}

func RegisterTicketingServiceServer(s grpc.ServiceRegistrar, srv TicketingServiceServer) {
	// If the following call pancis, it indicates UnimplementedTicketingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TicketingService_ServiceDesc, srv)
}

func _TicketingService_CreateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingServiceServer).CreateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketingService_CreateReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingServiceServer).CreateReservation(ctx, req.(*CreateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketingService_GetReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingServiceServer).GetReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketingService_GetReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingServiceServer).GetReservation(ctx, req.(*GetReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketingService_GetSeatAllocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSeatAllocatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingServiceServer).GetSeatAllocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketingService_GetSeatAllocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingServiceServer).GetSeatAllocations(ctx, req.(*GetSeatAllocatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketingService_DeleteReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingServiceServer).DeleteReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketingService_DeleteReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingServiceServer).DeleteReservation(ctx, req.(*DeleteReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicketingService_UpdateReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicketingServiceServer).UpdateReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TicketingService_UpdateReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicketingServiceServer).UpdateReservation(ctx, req.(*UpdateReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicketingService_ServiceDesc is the grpc.ServiceDesc for TicketingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicketingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ticketing.TicketingService",
	HandlerType: (*TicketingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReservation",
			Handler:    _TicketingService_CreateReservation_Handler,
		},
		{
			MethodName: "GetReservation",
			Handler:    _TicketingService_GetReservation_Handler,
		},
		{
			MethodName: "GetSeatAllocations",
			Handler:    _TicketingService_GetSeatAllocations_Handler,
		},
		{
			MethodName: "DeleteReservation",
			Handler:    _TicketingService_DeleteReservation_Handler,
		},
		{
			MethodName: "UpdateReservation",
			Handler:    _TicketingService_UpdateReservation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ticketing.proto",
}
